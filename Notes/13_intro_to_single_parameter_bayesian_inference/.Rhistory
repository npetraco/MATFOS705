lambda   <- 1/nu.tilde * 1e9           # units: nm
lambda
RH  <- 109625 * 100
nlo <- 4
nhi <- 7
nu.tilde <- RH*(1/(nlo^2) - 1/(nhi^2)) # units: m^-1
lambda   <- 1/nu.tilde * 1e9           # units: nm
lambda
RH  <- 109625 * 100
nlo <- 3
nhi <- 4
nu.tilde <- RH*(1/(nlo^2) - 1/(nhi^2)) # units: m^-1
lambda   <- 1/nu.tilde * 1e9           # units: nm
lambda
RH  <- 109625 * 100
nlo <- 2
nhi <- 3
nu.tilde <- RH*(1/(nlo^2) - 1/(nhi^2)) # units: m^-1
lambda   <- 1/nu.tilde * 1e9           # units: nm
lambda
RH  <- 109625 * 100
nlo <- 2
nhi <- 3
nu.tilde <- RH*(1/(nlo^2) - 1/(nhi^2)) # units: m^-1
lambda   <- 1/nu.tilde * 1e9           # units: nm
lambda
lambda <- 656.7845e-9
n.lo   <- 3
n.ho   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.hi   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.lo   <- 3
n.hi   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.hi # Round this
lambda <- 656.7845e-9
n.lo   <- 3
n.hi   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.hi   <- 3
lambda <- 656.7845e-9
n.hi   <- 3
n.lo   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.lo # Round this
lambda <- 656.7845e-9
n.hi   <- 3
n.lo   <- sqrt( ((1/lambda)/RH)) - 1/((1/(n.hi^2)) )
n.lo # Round this
lambda <- 656.7845e-9
n.hi   <- 3
lambda*RH
1/(lambda*RH)
1/(lambda*RH) + 1/(n.hi^2)
1/(1/(lambda*RH) + 1/(n.hi^2))
sqrt(1/(1/(lambda*RH) + 1/(n.hi^2)))
n.lo   <- sqrt(1/(1/(lambda*RH) + 1/(n.hi^2)))
n.lo
RH  <- 109625 * 100
nlo <- 2
nhi <- 3
library(che302r)
# A.
Phi <- 4.25
PhiJ <- Phi*1.60218e-19
PhiJ
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
KE <- E.photon - PhiJ
KE
PhiJ <- Phi*1.60218e-19
# A.
Phi <- 4.25
PhiJ <- Phi*1.60218e-19
PhiJ
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
# A.
Phi <- 4.25
PhiJ <- Phi*1.60218e-19
PhiJ
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
KE <- E.photon - PhiJ
KE
me <- 9.1e-31
v <- sqrt(2*KE/me)
v
KE
# C.
lambda2 <- 1250e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
library(che302r)
# A.
Phi <- 4.25
PhiJ <- Phi*1.60218e-19
PhiJ
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
KE <- E.photon - PhiJ
KE
me <- 9.1e-31
v <- sqrt(2*KE/me)
v
# C.
lambda2 <- 1250e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 1150e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 950e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
# C.
lambda2 <- 650e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 350e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 250e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 280e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 290e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 300e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 299e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 295e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 294e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 293e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
# C.
lambda2 <- 291e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
sqrt(2*KE/me)
library(che302r)
# a.
lambda <- 1355
temp   <- 6000
rho <- 2*h*cl/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# a.
lambda <- 1355e-9
temp   <- 6000
rho <- 2*h*cl/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# b.
lambda <- 223859.3
temp   <- 15000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# b.
lambda <- 223859.3
# b.
lambda <- 223859.3e-9
temp   <- 15000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# c.
lambda <- 19e-9
temp   <- 20000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
library(che302r)
# A.
Phi <- 4.25
PhiJ <- Phi*1.60218e-19
PhiJ
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
KE <- E.photon - PhiJ
KE
me <- 9.1e-31
v <- sqrt(2*KE/me)
v
# C.
lambda2 <- 291e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
v <- sqrt(2*KE/me)
v
# C.
lambda2 <- 291e-9
E.photon2 <- h*cl/lambda2
E.photon2
# B.
lambda <- 130e-9
E.photon <- h*cl/lambda
E.photon
KE <- E.photon - PhiJ
KE
me <- 9.1e-31
me <- 9.1e-31
v <- sqrt(2*KE/me)
v
# C.
lambda2 <- 291e-9
E.photon2 <- h*cl/lambda2
E.photon2
KE2 <- E.photon2 - PhiJ
KE2
v <- sqrt(2*KE2/me)
v
library(che302r)
# a.
lambda <- 1355e-9
temp <- 6000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# b.
lambda <- 223859.3e-9
temp <- 15000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
# c.
lambda <- 19e-9
temp <- 20000
rho <- 2*h*cl^2/(lambda^5) * exp((-1*h*cl)/(lambda*kB*temp))
rho
library(che302r)
# a.
lam <- 121.57e-9
En <- h*cl/lam
nu <- cl/lam
nu.tilde <- 1/(lam*100)
En
nu
nu.tilde
# b.
p <- h/lam
p
# c.
nu.tilde <- 82257.14 * 100 # in units of meters^-1
RH <- 109625 * 100 # in units of meters^-1
n.lo <- 1
n.hi <- sqrt( 1/((1/(n.lo^2)) - (nu.tilde/RH)) )
n.hi
n.hi # Round this
library(che302r)
h
cl
kB
kB <- 1.38065e-23
cl <- 299792458
T1 <- 7000
rho1<-function(x){(8*pi*h*cl)/(x^5*(exp(h*cl/x*kB*T1))-1)}
curve(rho1,0,5e-6)
curve(rho1,0,5e-9)
rho1<-function(x){(8*pi*h*cl)/(x^5)*(exp(h*cl/(x*kB*T1))-1)}
curve(rho1,0,5e-9)
rho1<-function(x){(8*pi*h*c)/(x^5*(exp(h*c/(x*k*T1)))-1)}
curve(rho1,0,5e-9)
h  <- 6.626068e-34
cl <- 299792458
kB <- 1.38065e-23
T1 <- 7000
rho1<-function(x){(8*pi*h*cl)/(x^5*(exp(h*cl/x*kB*T1))-1)}
curve(rho1,0,5e-9)
rho1<-function(x){(8*pi*h*cl)/(x^5*(exp(h*cl/(x*kB*T1) ))-1)}
curve(rho1,0,5e-9)
curve(rho1,0,500e-9)
rho1<-function(x){(8*pi*h*cl)/(x^5)*(exp(h*cl/(x*kB*T1) ))-1)}
curve(rho1,0,500e-9)
rho1<-function(x){(8*pi*h*cl)/(x^5)*(exp(h*cl/(x*kB*T1) ))-1)}
#rho1<-function(x){(8*pi*h*c)/(x^5*(exp(h*c/x*k*T1))-1)}
rho1 <- function(x){(8*pi*h*cl)/(x^5 * (exp((h*cl)/(x*kB*T1)) - 1))  }
curve(rho1,0,500e-9)
curve(rho1,0,1000e-9)
curve(rho1,0,2000e-9)
curve(rho1,0,2400e-9)
curve(rho1,0,3000e-9)
#rho1<- function(x){(8*pi*h*c)/(x^5*(exp(h*c/x*k*T1))-1)}
#rho1 <- function(x){(8*pi*h*cl)/(x^5 * (exp((h*cl)/(x*kB*T1)) - 1))  }
rho1 <- function(x){(8*pi*h*cl)/(x^5 * (exp(h*cl/(x*kB*T1)) - 1))  }
curve(rho1,0,3000e-9)
curve(rho1,0,1000e-9)
curve(rho1,0,3000e-9)
k  <- 1.38065e-23
T1 <- 7000
#rho1<- function(x){(8*pi*h*c)/(x^5*(exp(h*c/x*k*T1))-1)}
rho1 <- function(x){(8*pi*h*cl)/(x^5 * (exp(h*cl/(x*k*T1)) - 1))}
curve(rho1,0,3000e-9)
curve(rho1,0,2500e-9)
curve(rho1,0,2500e-9)
m <- 10                          # number of US companies
n <- 20                          # number of non-US companies
(t <- m + n)                     # total number of companies
k<- 7                            # number of companies selected
# x = number of section 97 students selected.
choose(30,7)                     # a Number of ways of selecting 7 out of 30
dhyper(0,m,n,k)                  # b P(X=0)
dhyper(3,m,n,k)                  # c P(X=3)
1-phyper(3,m,n,k)                # d P(X>3). Same as 1-P(X<=3)
phyper(3,m,n,k,lower.tail=FALSE) # Another way for d
(p<-m/(m+n))                     # original proportion of US Companies to all companies
(bigger <- 1 - phyper(ex,m,n,k))  #g bigger than expected value is 3 or more
(p<-m/(m+n))                     # original proportion of US Companies to all companies
(ex <- k*p)                      # e expected value for hypergometric
ex
(vx <- ((m+n-k)/(m+n-1))*k*p*(1-p)) #Variance of X if batch size is k=k
(sdx<-sqrt(vx))                     # f standard deviation of X
sdx
(bigger <- 1 - phyper(ex,m,n,k))  #g bigger than expected value is 3 or more
1 - phyper(2,m,n,k)               #g another way
dhyper(8,m,n,k)                   #h The probability is 0 since we only picked 7.
55+87
# Prior hyper-parameters
a <- 1
b <- 1
# The data:
n <- 10     # Number of flips
s <- 4      # Number of heads
# What the prior looks like:
p
# What the prior looks like:
p <- seq(from=0, to=1, length.out=1000)
# What the prior looks like:
p <- seq(from=0, to=1, length.out=1000)
# What the prior looks like:
p      <- seq(from=0, to=1, length.out=1000)
priorf <- dbeta(p, shape1 = a, shape2 = b)
plot(p, priorf)
# What the likelihood looks like:
dbinom(x = s, size = n, prob = p )
plot(p, likef)
# What the likelihood looks like:
likef <- dbinom(x = s, size = n, prob = p )
plot(p, likef)
# What the posterior looks like:
postf <- dbeta(x = p, shape1 = s+a, shape2 = n-s+b)
plot(p, postf)
2.75*20
library(rjags)
setwd("/Users/karen2/latex/class/fos705/Applied_Bayes/Notes/Component_lessons_format/13_intro_to_single_parameter_bayesian_inference")
dat <- list(
# Prior hyper-parameters
a = 1,
b = 1,
# The data:
n = 1,     # Number of flips
s = 4,     # Number of heads
)
inits <- function (){
list(ppi=runif(1))
}
dat <- list(
# Prior hyper-parameters
a = 1,
b = 1,
# The data:
n = 1,     # Number of flips
s = 4     # Number of heads
)
inits <- function (){
list(ppi=runif(1))
}
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=5000, n.burnin = 500, n.thin = 10,
n.chains=1,
model.file="beta_binomial.bug.R")
library(R2jags)
setwd("/Users/karen2/latex/class/fos705/Applied_Bayes/Notes/Component_lessons_format/13_intro_to_single_parameter_bayesian_inference")
dat <- list(
# Prior hyper-parameters
a = 1,
b = 1,
# The data:
n = 1,     # Number of flips
s = 4     # Number of heads
)
inits <- function (){
list(ppi=runif(1))
}
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=5000, n.burnin = 500, n.thin = 10,
n.chains=1,
model.file="beta_binomial.bug.R")
dat <- list(
# Prior hyper-parameters
a = 1,
b = 1,
# The data:
n = 10,     # Number of flips
s = 4     # Number of heads
)
inits <- function (){
list(ppi=runif(1))
}
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=5000, n.burnin = 500, n.thin = 10,
n.chains=1,
model.file="beta_binomial.bug.R")
traceplot(fit)
traceplot(fit)
print(fit)
plot(fit)
fit$BUGSoutput$sims.matrix
fit$BUGSoutput$sims.matrix$ppi
fit$BUGSoutput$sims.matrix[ppi]
fit$BUGSoutput$sims.matrix[,ppi]
fit$BUGSoutput$sims.matrix[,"ppi"]
ppi <- fit$BUGSoutput$sims.matrix[,"ppi"]
traceplot(fit)
library(coda)
traceplot(fit)
coda::traceplot(fit)
mcl <- as.mcmc.list(jsim$BUGSoutput)
mcl <- as.mcmc.list(fit$BUGSoutput)
mcl
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=5000, n.burnin = 500, n.thin = 10,
n.chains=4,
model.file="beta_binomial.bug.R")
print(fit)
traceplot(fit)
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=10000, n.burnin = 500, n.thin = 10,
n.chains=4,
model.file="beta_binomial.bug.R")
print(fit)
traceplot(fit)
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("ppi"),
n.iter=20000, n.burnin = 500, n.thin = 10,
n.chains=4,
model.file="beta_binomial.bug.R")
print(fit)
traceplot(fit)
mcl <- as.mcmc.list(fit$BUGSoutput)
mcl
traceplot(mcl)
traceplot(mcl)
# Examine posterior
ppi <- fit$BUGSoutput$sims.matrix[,"ppi"]
hist(ppi)
