library(logitnorm)
y   <- dlogitnorm(ppi, mu = 1.20, sigma = 0.03)
plot(ppi,y, typ="l")
ppi <- seq(from=0, to=1, length.out = 1000)
plot(ppi,y, typ="l")
y   <- dlogitnorm(ppi, mu = 1.20, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 1.25, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.75, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.5, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.5, sigma = 0.1)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.25, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.15, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.1, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.07, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.05, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 0.01, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's 50/50
y   <- dlogitnorm(ppi, mu = 0.001, sigma = 0.2)
plot(ppi,y, typ="l")
# Pretty sure it's 50/50
y   <- dlogitnorm(ppi, mu = 0.0, sigma = 0.2)
plot(ppi,y, typ="l")
# Pretty sure it's 50/50
y   <- dlogitnorm(ppi, mu = 0.0, sigma = 0.2)
plot(ppi,y, typ="l")
# Pretty sure it's 50/50
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 0.2)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.5, sigma = 0.2)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.5, sigma = 1)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.5, sigma = 1.5)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -0.5, sigma = 1.5)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 1.5)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 1)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 0.8)
plot(ppi,y, typ="l")
# High wide
y   <- dlogitnorm(ppi, mu = 1.0, sigma = 0.8)
plot(ppi,y, typ="l")
# Pretty sure it's low
y   <- dlogitnorm(ppi, mu = -1.20, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's low
y   <- dlogitnorm(ppi, mu = -1.3, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's low
y   <- dlogitnorm(ppi, mu = -1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 1.20, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Load a Stan model:
getwd()
library(coda)      # Handy utility functions like HPDIs
library(rstan)
# Extra options to set for Stan:
options(mc.cores = 4)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("binomial_logitnormal.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Experimental sample for flipping this coin:
n <- 10     # Number of flips per experiment
s <- 4      # Number of heads observed
# Pretty sure it's 50/50
y   <- dlogitnorm(ppi, mu = 0.01, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's low
y   <- dlogitnorm(ppi, mu = -1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 0.8)
plot(ppi,y, typ="l")
# High wide
y   <- dlogitnorm(ppi, mu = 1.0, sigma = 0.8)
plot(ppi,y, typ="l")
dat <- list(
n     = n,
s     = s,
mu    = 0.1,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T) # Posterior for p.heads
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = 1.4,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = -1.4,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = -1.0,   # Hyper param for logit-normal prior
sigma = 0.8 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = 1.0,   # Hyper param for logit-normal prior
sigma = 0.8 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
# Experimental sample for flipping this coin:
#n <- 10     # Number of flips per experiment
#s <- 4      # Number of heads observed
n <- 100000     # Number of flips per experiment
s <- 40002      # Number of heads observed
dat <- list(
n     = n,
s     = s,
mu    = 1.0,   # Hyper param for logit-normal prior
sigma = 0.8 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = -1.0,   # Hyper param for logit-normal prior
sigma = 0.8 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = -1.4,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = 1.4,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
dat <- list(
n     = n,
s     = s,
mu    = 0.1,   # Hyper param for logit-normal prior
sigma = 0.03 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
ppi <- seq(from=0, to=1, length.out = 1000)
y   <- dlogitnorm(ppi, mu = 1.20, sigma = 0.03)
library(logitnorm)
ppi <- seq(from=0, to=1, length.out = 1000)
y   <- dlogitnorm(ppi, mu = 1.20, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's about 50/50
y   <- dlogitnorm(ppi, mu = 0.01, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's high
y   <- dlogitnorm(ppi, mu = 1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Pretty sure it's low
y   <- dlogitnorm(ppi, mu = -1.4, sigma = 0.03)
plot(ppi,y, typ="l")
# Low wide
y   <- dlogitnorm(ppi, mu = -1.0, sigma = 0.8)
plot(ppi,y, typ="l")
# High wide
y   <- dlogitnorm(ppi, mu = 1.0, sigma = 0.8)
plot(ppi,y, typ="l")
library(coda)      # Handy utility functions like HPDIs
library(rstan)
library(shinystan) # A nice GUI to analyze results
# Extra options to set for Stan:
options(mc.cores = 4)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("binomial_logitnormal.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Experimental sample for flipping this coin:
#n <- 10     # Number of flips per experiment
#s <- 4      # Number of heads observed
#n <- 100000     # Number of flips per experiment
#s <- 40002      # Number of heads observed
n <- 7
s <- 7
dat <- list(
n     = n,
s     = s,
mu    = 1.0,   # Hyper param for logit-normal prior
sigma = 0.8 # Hyper param for logit-normal prior
#  mu    = 1.20,   # Hyper param for logit-normal prior
#  sigma = 0.03 # Hyper param for logit-normal prior
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("pi"))
plot(fit)
# Examine the sampling output in more detail:
ppi <- extract(fit,"pi")[[1]]
hist(ppi, bre=80, probability = T, xlim=c(0,1)) # Posterior for p.heads
cred <- 0.95
alp  <- 1 - cred
HPDinterval(mcmc(as.numeric(ppi)), prob = cred) # HPDI
mean(ppi)
1-HPDinterval(mcmc(as.numeric(ppi)), prob = cred) # HPDI
1-mean(ppi)
