library(bayesutils)
fbbfd <- data.frame(fbbf)
# Load data:
num.examiners <- nrow(fbbfd)
n             <- fbbfd$num.NM.comparisons
s             <- fbbfd$num.false.positive
# Drop those examiners who made no decisions because they call all exemplars inconclusive:
drop.idxs         <- which(n.mi==0)
# Remove inconclusive decisions from set totals (minus inconclusives, mi)
n.mi              <- fbbfd$num.NM.comparisons - fbbfd$num.NM.inconclusive
# Drop those examiners who made no decisions because they call all exemplars inconclusive:
drop.idxs         <- which(n.mi==0)
n.mi              <- n.mi[-drop.idxs]
num.examiners.mi <- length(n.mi)
s.mi             <- s[-drop.idxs]
s
s.mi
s[drop.idxs]
n
n.mi
num.examiners
num.examiners.mi
# Reset variables
num.examiners <- num.examiners.mi
n             <- n.mi
s             <- s.mi
# Load data:
num.examiners <- nrow(fbbfd)
n             <- fbbfd$num.NM.comparisons
s             <- fbbfd$num.false.positive
# Remove inconclusive decisions from set totals (minus inconclusives, mi)
n.mi              <- fbbfd$num.NM.comparisons - fbbfd$num.NM.inconclusive
# Drop those examiners who made no decisions because they call all exemplars inconclusive:
drop.idxs        <- which(n.mi==0)
n.mi             <- n.mi[-drop.idxs]
num.examiners.mi <- length(n.mi)
s.mi             <- s[-drop.idxs]
dat<-list(
lambda = 1/10,
m = num.examiners,
n = n,
s = s
)
# Extra options to set for Stan:
#options(mc.cores = 4)
rstan_options(auto_write = TRUE)
# Load a Stan model:
stan.code <- paste(readLines(system.file("stan/betabin-exp.stan", package = "bayesutils")),collapse="\n")
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model', verbose=T)
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
fit
params.chains <- extract.params(fit, by.chainQ = T)
#mcmc_trace(params.chains, pars = c("alpha", "beta", "ppi", "rho"))
mcmc_pairs(params.chains, pars = c("alpha", "beta", "ppi", "rho"))
# Examine posteriors:
params.mat <- data.frame(extract.params(fit, as.matrixQ = T))
ppi <- params.mat$ppi
hist(ppi, bre=40)
library(ggdist)
x.cs <- c(1.51131, 1.51838, 1.52315, 1.52247, 1.52365, 1.51613, 1.51602, 1.51623, 1.51719, 1.51683, 1.51545, 1.51556, 1.51727, 1.51531, 1.51609, 1.51508, 1.51653, 1.51514, 1.51658, 1.51617, 1.51732, 1.51645, 1.51831, 1.51640, 1.51623, 1.51685, 1.52065, 1.51651, 1.51711)
x.sp <- c(1.51905, 1.51937, 1.51829, 1.51852, 1.51299, 1.51888, 1.51916, 1.51969, 1.51115)
g.mn <- mean(c(x.cs, x.sp)) # Global mean
g.sd <- sd(c(x.cs, x.sp))   # Global sd
x.cs.std <- (x.cs - g.mn)/g.sd
x.sp.std <- (x.sp - g.mn)/g.sd
all.dat <- data.frame(
c(rep("CS", length(x.cs.std)), rep("SP", length(x.sp.std))),
c(x.cs, x.sp),
c(x.cs.std, x.sp.std)
)
colnames(all.dat) <- c("source", "RI", "RI.std")
all.dat
aggregate(all.dat$RI.std, list(all.dat$source), mean)
aggregate(all.dat$RI.std, list(all.dat$source), sd)
# prior on sigma, the data's sd:
sax <- seq(from=0, to=4, length.out=1000)
ys  <- dstudent_t(sax, df = 3, mu = 0, sigma = 1)
plot(sax, ys)
# What does the data's likelihood look like??
hist(x.cs.std)
hist(x.sp.std)
# What does the data's likelihood look like??
hist(x.cs.std)
hist(x.sp.std)
aggregate(all.dat$RI.std, list(all.dat$source), mean)
aggregate(all.dat$RI.std, list(all.dat$source), sd)
plot(sax, ys)
# What does the data's likelihood look like??
hist(x.cs.std)
hist(x.sp.std)
aggregate(all.dat$RI.std, list(all.dat$source), mean)
aggregate(all.dat$RI.std, list(all.dat$source), sd)
# prior on sigma, the data's sd:
sax <- seq(from=0, to=4, length.out=1000)
ys  <- dstudent_t(sax, df = 3, mu = 0, sigma = 1)
plot(sax, ys)
# prior on sigma, the data's sd:
sam <- seq(from=0, to=50, length.out=1000)
ym  <- dnorm(sam, mean = 0, sd = 1)
plot(sam, ym)
ym  <- dnorm(sam, mean = 0, sd = 10)
plot(sam, ym)
# prior on sigma, the data's sd:
sax <- seq(from=0, to=4, length.out=1000)
ys  <- dstudent_t(sax, df = 3, mu = 0, sigma = 1)
plot(sax, ys)
aggregate(all.dat$RI.std, list(all.dat$source), mean)
aggregate(all.dat$RI.std, list(all.dat$source), sd)
# Tack the data together in raw and standardized form for easier perusal:
all.dat <- data.frame(
c(rep("CS", length(x.cs.std)), rep("SP", length(x.sp.std))),
c(x.cs, x.sp),
c(x.cs.std, x.sp.std)
)
colnames(all.dat) <- c("source", "RI", "RI.std")
all.dat
# What does the data's likelihood look like??
hist(x.cs.std)
hist(x.sp.std)
# What does the data's likelihood look like??
hist(x.cs)
hist(x.sp)
hist(x.cs.std)
hist(x.sp.std)
# What does the data's likelihood look like??
hist(x.cs)
hist(x.cs.std)
aggregate(all.dat$RI.std, list(all.dat$source), mean)
aggregate(all.dat$RI.std, list(all.dat$source), sd)
# What does the data's likelihood look like??
par(mfrow=c(2,2))
hist(x.cs)
hist(x.sp)
hist(x.cs.std)
hist(x.sp.std)
library(bayesutils)
x.cs <- c(1.51131, 1.51838, 1.52315, 1.52247, 1.52365, 1.51613, 1.51602, 1.51623, 1.51719, 1.51683, 1.51545, 1.51556, 1.51727, 1.51531, 1.51609, 1.51508, 1.51653, 1.51514, 1.51658, 1.51617, 1.51732, 1.51645, 1.51831, 1.51640, 1.51623, 1.51685, 1.52065, 1.51651, 1.51711)
x.sp <- c(1.51905, 1.51937, 1.51829, 1.51852, 1.51299, 1.51888, 1.51916, 1.51969, 1.51115)
g.mn <- mean(c(x.cs, x.sp)) # Global mean
g.sd <- sd(c(x.cs, x.sp))   # Global sd
x.cs.std <- (x.cs - g.mn)/g.sd
x.sp.std <- (x.sp - g.mn)/g.sd
dat <- list(
"n"           = length(x.sp.std),
"y"           = x.sp.std,
"nu_fix"      = 6,
"mu_n_hyp"    = 0,
"sigma_n_hyp" = 10,
"nu_t_hyp"    = 3,
"mu_t_hyp"    = 0,
"sigma_t_hyp" = 1
)
inits <- function (){
list(mu=rnorm(1), sigma=runif(1))
}
#Run the model:
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("mu", "sigma"),
n.iter=20000, n.burnin = 500, n.thin = 10,
n.chains=4,
model.file = system.file("jags/T-norm_T_multiple.bug.R", package = "bayesutils"))
fit
params.chains <- extract.params(fit, by.chainQ = T)
#mcmc_trace(params.chains)
mcmc_pairs(params.chains, off_diag_args = list(size = 1.5))
params.chains
params.chains$mu
params.chains[["mu"]]
params.chains[[1]]
params.chains[,,1]
params.chains[,,"mu"]
mcmc_trace(params.chains[,,"mu"])
#mcmc_trace(params.chains[,,"mu"])
mcmc_trace(params.chains[,,"sigma"])
#mcmc_trace(params.chains[,,"mu"])
#mcmc_trace(params.chains[,,"sigma"])
mcmc_pairs(params.chains, off_diag_args = list(size = 1.5))
#mcmc_trace(params.chains[,,"mu"])
#mcmc_trace(params.chains[,,"sigma"])
autocorrelation.plots(params.chains[,,"sigma"])
#mcmc_trace(params.chains[,,"mu"])
#mcmc_trace(params.chains[,,"sigma"])
autocorrelation.plots(params.chains)
fit
?jags
class(fit)
fit$n.iter
fit$BUGSoutput$summary
class(params.chains)
# Examine posteriors:
params.mat <- extract.params(fit, as.matrixQ = T)
mcmc_areas(params.mat, prob = 0.95)
# Put parameter estimates back on original scale:
colnames(params.mat)
mu    <- params.mat$mu
sigma <- params.mat$sigma
mu2 <- g.mn + mu*g.sd
parameter.intervals(mu2, plotQ = T)
# Un-standardize:
hist(mu, bre=40)
hist(mu2, bre=40)
# Rescale to get rid of all the 1.5s, and put on a nicer looking scale
mu3 <- (mu2-1.5)*10000
parameter.intervals(mu3, plotQ = T)
(g.mn-1.5)*10000 # Empirical average for comparison
parameter.intervals(mu2, plotQ = T)
mean(mu2)                             # Actual posterior's mean
library(bayesutils)
counts <- indkm.counts
dat   <- list(
"n"      = length(counts),
"s"      = as.numeric(counts),
"mun"    = 0,
"sigman" = 100,
"mut"    = 0,
"sigmat" = 10,
"nu"     = 3
)
inits <- function (){
list(lambda=runif(1), phi=runif(1))
}
#Run the model:
fit <- jags(data=dat,
inits=inits,
parameters.to.save = c("lambda", "phi"),
n.iter=20000, n.burnin = 500, n.thin = 10,
n.chains=4,
model.file = system.file("jags/negbin-trunc-norm_trunc-T.bug.R", package = "bayesutils"))
#mcmc_trace(params.chains, pars = c("lambda", "phi"))
mcmc_pairs(params.chains, pars = c("lambda", "phi"))
params.chains <- extract.params(fit, by.chainQ = T)
#mcmc_trace(params.chains, pars = c("lambda", "phi"))
mcmc_pairs(params.chains, pars = c("lambda", "phi"))
# Examine posteriors:
params.mat <- extract.params(fit, as.matrixQ = T)
mcmc_areas(params.mat, prob = 0.95)
colnames(params.mat)
lambda <- params.mat[,"lambda"]
phi    <- params.mat[,"phi"]
hist(lambda, bre=40)                # mean counts
hist(lambda^2/phi, bre=40)          # dispersion over Poisson model
hist(lambda + lambda^2/phi, bre=40) # variance in counts
var(counts)                         # empirical variance
mean(lambda + lambda^2/phi)         # posterior mean for variance
parameter.intervals(lambda, plotQ = T)
mean(lambda)
mean(counts)
var(counts)
parameter.intervals(lambda + lambda^2/phi, plotQ = T)
# Overdispersion in terms of sd, sigma:
sigma <- sqrt(lambda + lambda^2/phi)
hist(sigma, bre=40, xlim=c(3.5,7))         # With extra dispersion term
hist(sqrt(lambda), bre=40, xlim=c(3.5,7))  # Without extra dispersion term
# posterior predictive distribution:
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
hist(indkm.counts, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
yrep <- rnbinom(length(lambda), size=phi, mu=lambda)
hist(yrep, bre=40)
