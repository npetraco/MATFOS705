getwd()
library(coda)      # Handy utility functions like HPDIs
library(rstan)
library(shinystan) # A nice GUI to analyze results
library(extraDistr)
dat <- c(0.2438356, 0.3917808, 4.7917808, 5.5561644, 0.2849315)
# Extra options to set for Stan:
options(mc.cores = 4)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
fail.times <- c(0.2438356, 0.3917808, 4.7917808, 5.5561644, 0.2849315)
dat <- list(
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Data:
dat <- list(
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Data:
dat <- list(
N     = length(fail.times)
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
# Data:
dat <- list(
N     = length(fail.times),
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Data:
dat <- list(
N     = length(fail.times),
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4,
control = list(adapt_delta = 0.95))
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4, control = list(adapt_delta = 0.999, max_treedepth = 30))
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Data:
dat <- list(
N     = length(fail.times),
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4, control = list(adapt_delta = 0.999, max_treedepth = 30))
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("lambda"))
plot(fit)
cred <- 0.95
alp  <- 1 - cred
library(rstan)
library(bayesutils)
# Extra options to set for Stan:
options(mc.cores = 1)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma_target_format.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Extra options to set for Stan:
options(mc.cores = 1)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#working.dir <- setwd("Desktop/")
stan.code   <- paste(readLines("exp_inv-gamma_target_format.stan"),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model')
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
# Data:
dat <- list(
N     = length(fail.times),
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
# Data:
fail.times <- c(0.2438356, 0.3917808, 4.7917808, 5.5561644, 0.2849315)
dat <- list(
N     = length(fail.times),
t     = fail.times,
alpha = 1.5, # prior hyper-parameter
beta  = 0.5  # prior hyper-parameter
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
traceplot(fit, pars=c("lambda"))
plot(fit)
cred <- 0.95
alp  <- 1 - cred
# Examine the sampling output in more detail:
lambda <- extract(fit,"lambda")[[1]]
hist(lambda, bre=80, probability = T) # Posterior for p.heads
cred <- 0.95
alp  <- 1 - cred
HPDI(lambda, prob = cred) # HPDI
HPDI(lambda, cred) # HPDI
library(bayes705)
library(coda)
library(rstan)
# Extra options to set for Stan:
options(mc.cores = 1)
rstan_options(auto_write = TRUE)
# Load a Stan model:
#setwd("<path_to_stan_file>")
stan.code   <- paste(readLines(system.file("stan/poisson-gamma.stan", package = "bayes705")),collapse='\n')
# Translate Stan code into C++
model.c <- stanc(model_code = stan.code, model_name = 'model', verbose=T)
# Compile the Stan C++ model:
sm <- stan_model(stanc_ret = model.c, verbose = T)
M <- c(1154, 1062, 1203, 1125, 1091, 1120, 1202, 1129, 1103, 1098, 1169, 1142, 1174, 1111, 1148, 1134, 1146, 1179, 1165, 1076, 1152, 1209, 1205, 1139, 1227, 1145, 1140, 1220, 1059, 1165)
A <- c(1326, 1362, 1297, 1350, 1324, 1384, 1343, 1373, 1345, 1399, 1364, 1380, 1303, 1232, 1330, 1306, 1309, 1336, 1367, 1291, 1325, 1348, 1318, 1351, 1382, 1340, 1305, 1306, 1333, 1337)
N <- c(1251, 1234, 1337, 1235, 1189, 1289, 1318, 1190, 1307, 1224, 1279, 1331, 1310, 1244, 1246, 1168, 1267, 1274, 1262, 1254, 1139, 1236, 1310, 1227, 1310, 1255, 1230 ,1327, 1242, 1269)
s <- c(M,A,N)
dat   <- list(
"n" = length(s),
"s" = s,
"a" = 25/16,
"b" = 1/16000
)
#Run the model:
fit <- sampling(sm, data = dat, iter=5000, thin = 1, chains = 4)
print(fit)
plot(fit)
# Examine posterior
#lambda <- fit$BUGSoutput$sims.matrix[,"lambda"] # JAGS
lambda <- extract(fit,"lambda")[[1]]             # Stan
parameter.intervals(lambda, prob=0.95, plotQ = T)
